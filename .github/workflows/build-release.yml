name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platforms:
        description: '构建平台 (android,ios,web,macos,windows,linux)'
        required: false
        default: 'android,web'
      skip_tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: 'stable'
  CI: true
  CI_PLATFORM: github

jobs:
  # 代码质量检查
  quality-check:
    name: 代码质量检查
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: ☕ 设置JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: 📱 设置Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: 📦 获取依赖
      run: flutter pub get
      
    - name: 🔍 代码分析
      run: flutter analyze
      
    - name: 📝 代码格式检查
      run: dart format --set-exit-if-changed .
      
    - name: 🧪 运行测试
      run: |
        if [ -d "test" ]; then
          flutter test --coverage
        else
          echo "未找到测试目录，跳过测试"
        fi
        
    - name: 📊 上传代码覆盖率
      if: hashFiles('coverage/lcov.info') != ''
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info

  # Android构建
  build-android:
    name: 构建Android
    runs-on: ubuntu-latest
    needs: quality-check
    if: always() && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: ☕ 设置JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: 📱 设置Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: 📦 获取依赖
      run: flutter pub get
      
    - name: 🔧 设置Android签名
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      run: |
        if [ -n "$ANDROID_KEYSTORE" ]; then
          echo "$ANDROID_KEYSTORE" | base64 --decode > android/app/key.jks
          echo "storePassword=$ANDROID_KEYSTORE_PASSWORD" >> android/key.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
          echo "storeFile=key.jks" >> android/key.properties
        fi
        
    - name: 🏗️ 构建APK
      run: flutter build apk --release --split-per-abi
      
    - name: 🏗️ 构建AAB
      run: flutter build appbundle --release
      
    - name: 📦 打包Android构建产物
      run: |
        mkdir -p artifacts/android
        cp build/app/outputs/flutter-apk/*.apk artifacts/android/ || true
        cp build/app/outputs/bundle/release/*.aab artifacts/android/ || true
        
    - name: 📤 上传Android构建产物
      uses: actions/upload-artifact@v3
      with:
        name: android-build
        path: artifacts/android/
        retention-days: 30

  # iOS构建 (仅在macOS上)
  build-ios:
    name: 构建iOS
    runs-on: macos-latest
    needs: quality-check
    if: always() && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped') && (contains(github.event.inputs.platforms, 'ios') || github.event_name == 'push')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 📱 设置Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: 📦 获取依赖
      run: flutter pub get
      
    - name: 🍎 设置iOS环境
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        flutter config --enable-ios
        
    - name: 🔧 设置iOS签名 (如果有证书)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
      run: |
        if [ -n "$IOS_CERTIFICATE" ]; then
          # 创建临时密钥链
          security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          
          # 导入证书
          echo "$IOS_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          
          # 导入描述文件
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        fi
        
    - name: 🏗️ 构建iOS
      env:
        IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
      run: |
        if [ -n "$IOS_CERTIFICATE" ]; then
          flutter build ipa --release
        else
          flutter build ios --release --no-codesign
        fi
        
    - name: 📦 打包iOS构建产物
      run: |
        mkdir -p artifacts/ios
        if [ -d "build/ios/ipa" ]; then
          cp build/ios/ipa/*.ipa artifacts/ios/ || true
        fi
        if [ -d "build/ios/iphoneos/Runner.app" ]; then
          cp -r build/ios/iphoneos/Runner.app artifacts/ios/
        fi
        
    - name: 📤 上传iOS构建产物
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: artifacts/ios/
        retention-days: 30

  # Web构建
  build-web:
    name: 构建Web
    runs-on: ubuntu-latest
    needs: quality-check
    if: always() && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 📱 设置Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: 📦 获取依赖
      run: flutter pub get
      
    - name: 🌐 启用Web支持
      run: flutter config --enable-web
      
    - name: 🏗️ 构建Web
      run: flutter build web --release
      
    - name: 📦 打包Web构建产物
      run: |
        mkdir -p artifacts
        cp -r build/web artifacts/
        cd artifacts
        tar -czf alouette-tts-web.tar.gz web/
        
    - name: 📤 上传Web构建产物
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: artifacts/
        retention-days: 30
        
    - name: 🚀 部署到GitHub Pages (仅主分支)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/web

  # macOS构建
  build-macos:
    name: 构建macOS
    runs-on: macos-latest
    needs: quality-check
    if: always() && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped') && contains(github.event.inputs.platforms, 'macos')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 📱 设置Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: 📦 获取依赖
      run: flutter pub get
      
    - name: 🖥️ 启用macOS支持
      run: flutter config --enable-macos-desktop
      
    - name: 🏗️ 构建macOS
      run: flutter build macos --release
      
    - name: 📦 打包macOS构建产物
      run: |
        mkdir -p artifacts/macos
        cp -r build/macos/Build/Products/Release/*.app artifacts/macos/
        
        # 创建DMG (如果需要)
        cd artifacts/macos
        if [ -d "*.app" ]; then
          hdiutil create -volname "Alouette TTS" -srcfolder *.app -ov -format UDZO ../alouette-tts-macos.dmg
        fi
        
    - name: 📤 上传macOS构建产物
      uses: actions/upload-artifact@v3
      with:
        name: macos-build
        path: artifacts/
        retention-days: 30

  # Windows构建
  build-windows:
    name: 构建Windows
    runs-on: windows-latest
    needs: quality-check
    if: always() && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped') && contains(github.event.inputs.platforms, 'windows')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 📱 设置Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: 📦 获取依赖
      run: flutter pub get
      
    - name: 🖥️ 启用Windows支持
      run: flutter config --enable-windows-desktop
      
    - name: 🏗️ 构建Windows
      run: flutter build windows --release
      
    - name: 📦 打包Windows构建产物
      run: |
        mkdir artifacts
        xcopy "build\windows\x64\runner\Release" "artifacts\windows" /E /I /Y
        cd artifacts
        7z a alouette-tts-windows.zip windows\
        
    - name: 📤 上传Windows构建产物
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: artifacts/
        retention-days: 30

  # Linux构建
  build-linux:
    name: 构建Linux
    runs-on: ubuntu-latest
    needs: quality-check
    if: always() && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped') && contains(github.event.inputs.platforms, 'linux')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🔧 安装Linux桌面依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
        
    - name: 📱 设置Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: 📦 获取依赖
      run: flutter pub get
      
    - name: 🖥️ 启用Linux支持
      run: flutter config --enable-linux-desktop
      
    - name: 🏗️ 构建Linux
      run: flutter build linux --release
      
    - name: 📦 打包Linux构建产物
      run: |
        mkdir -p artifacts
        cp -r build/linux/x64/release/bundle artifacts/linux
        cd artifacts
        tar -czf alouette-tts-linux.tar.gz linux/
        
    - name: 📤 上传Linux构建产物
      uses: actions/upload-artifact@v3
      with:
        name: linux-build
        path: artifacts/
        retention-days: 30

  # 创建发布
  create-release:
    name: 创建发布
    runs-on: ubuntu-latest
    needs: [build-android, build-web]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 📥 下载所有构建产物
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: 📝 生成发布说明
      run: |
        echo "# Alouette TTS ${GITHUB_REF#refs/tags/}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## 构建产物" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        find artifacts -name "*.apk" -o -name "*.aab" -o -name "*.ipa" -o -name "*.tar.gz" -o -name "*.zip" -o -name "*.dmg" | while read file; do
          size=$(ls -lh "$file" | awk '{print $5}')
          echo "- $(basename "$file") (${size})" >> RELEASE_NOTES.md
        done
        
    - name: 🏷️ 创建发布
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_NOTES.md
        files: |
          artifacts/**/*.apk
          artifacts/**/*.aab
          artifacts/**/*.ipa
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
          artifacts/**/*.dmg
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
